[
    {
        "id": "asst_1X5qGHP4Cb3B7cmrOZLO2pCP",
        "created_at": 1732298366,
        "description": "This agent oversees the agency's operations, coordinates between agents, and communicates with clients.",
        "instructions": "## MarketInsightAgency Manifesto\n\nThe mission of MarketInsightAgency is to provide comprehensive market analysis and insights by leveraging advanced AI-driven agents. These agents will work collaboratively to analyze market trends, track competitors, assess sentiment, generate customer profiles, collect feedback, and produce detailed reports. If any API fails, the agents will utilize GPT-based datasets to generate the necessary data. The ultimate goal is to empower businesses with actionable insights for strategic decision-making.\n\n### Goals\n- Deliver accurate and timely market trend analysis.\n- Monitor competitors effectively and provide actionable insights.\n- Assess sentiment from news and social media platforms.\n- Generate detailed customer profiles using CRM and demographic data.\n- Collect and analyze user feedback efficiently.\n- Identify market opportunities through economic data analysis.\n- Produce comprehensive reports and visualizations for strategic decisions.\n\n### Working Environment\nThe agency operates in a dynamic environment where agents utilize a variety of tools and libraries, including pandas, scikit-learn, BeautifulSoup, Scrapy, NLTK, spaCy, Jinja2, and matplotlib. In cases where APIs are unavailable, GPT-based datasets will be used to ensure continuous data flow and analysis.\n\n# MarketInsightCEO Agent Instructions\n\nYou are an agent that oversees the agency's operations, coordinates between agents, and communicates with clients. You must ensure that all agents are aligned with the agency's goals and that communication is smooth and effective.\n\n### Primary Instructions:\n1. Monitor the operations of the agency and ensure all agents are working towards the common goal.\n2. Coordinate between agents to facilitate collaboration and resolve any conflicts or issues that arise.\n3. Communicate with clients to understand their needs and ensure their requirements are being met by the agency.\n4. Provide regular updates to clients and stakeholders about the progress and status of projects.\n5. Ensure all agents have the resources and support they need to perform their tasks effectively.\n6. Maintain a high level of communication and transparency within the agency and with clients.",
        "metadata": {},
        "model": "gpt-4-1106-preview",
        "name": "MarketInsightCEO",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "CEO_MarkdownWriter",
                    "description": "Correctly extracted `CEO_MarkdownWriter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "content": {
                                "description": "The content to write to the markdown file",
                                "title": "Content",
                                "type": "string"
                            },
                            "file_path": {
                                "description": "The path where the markdown file should be saved (including filename)",
                                "title": "File Path",
                                "type": "string"
                            },
                            "metadata": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional metadata to include at the top of the file in YAML format",
                                "title": "Metadata"
                            },
                            "append": {
                                "default": false,
                                "description": "If True, append to existing file. If False, create new or overwrite",
                                "title": "Append",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "content",
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "CEO_TaskReporter",
                    "description": "Correctly extracted `CEO_TaskReporter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "task_name": {
                                "description": "Name or title of the task",
                                "title": "Task Name",
                                "type": "string"
                            },
                            "task_description": {
                                "description": "Detailed description of the task",
                                "title": "Task Description",
                                "type": "string"
                            },
                            "findings": {
                                "description": "List of key findings or results",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Findings",
                                "type": "array"
                            },
                            "actions_taken": {
                                "description": "List of actions taken during the task",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Actions Taken",
                                "type": "array"
                            },
                            "recommendations": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional list of recommendations based on findings",
                                "title": "Recommendations"
                            },
                            "additional_info": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Any additional information to include in the report",
                                "title": "Additional Info"
                            },
                            "output_dir": {
                                "default": "./reports",
                                "description": "Directory where the report should be saved",
                                "title": "Output Dir",
                                "type": "string"
                            }
                        },
                        "required": [
                            "actions_taken",
                            "findings",
                            "task_description",
                            "task_name"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "SendMessage",
                    "description": "Use this tool to facilitate direct, synchronous communication between specialized agents within your agency. When you send a message using this tool, you receive a response exclusively from the designated recipient agent. To continue the dialogue, invoke this tool again with the desired recipient agent and your follow-up message. Remember, communication here is synchronous; the recipient agent won't perform any tasks post-response. You are responsible for relaying the recipient agent's responses back to the user, as the user does not have direct access to these replies. Keep engaging with the tool for continuous interaction until the task is fully resolved. Do not send more than 1 message at a time.",
                    "parameters": {
                        "$defs": {
                            "recipient": {
                                "enum": [
                                    "CompetitorTrackingAgent",
                                    "SentimentAnalysisAgent",
                                    "ICPGeneratorAgent",
                                    "FeedbackCollectorAgent",
                                    "MarketAnalysisAgent",
                                    "ReportingAgent"
                                ],
                                "title": "recipient",
                                "type": "string"
                            }
                        },
                        "properties": {
                            "my_primary_instructions": {
                                "description": "Please repeat your primary instructions step-by-step, including both completed and the following next steps that you need to perform. For multi-step, complex tasks, first break them down into smaller steps yourself. Then, issue each step individually to the recipient agent via the message parameter. Each identified step should be sent in separate message. Keep in mind, that the recipient agent does not have access to these instructions. You must include recipient agent-specific instructions in the message or additional_instructions parameters.",
                                "title": "My Primary Instructions",
                                "type": "string"
                            },
                            "recipient": {
                                "allOf": [
                                    {
                                        "$ref": "#/$defs/recipient"
                                    }
                                ],
                                "description": "CompetitorTrackingAgent: This agent tracks competitor activities using AI-powered analysis.\nSentimentAnalysisAgent: This agent processes news and social media sentiment using NLP libraries like NLTK and spaCy.\nICPGeneratorAgent: This agent creates customer profiles using CRM data and demographic databases with pandas and scikit-learn.\nFeedbackCollectorAgent: This agent processes user feedback through APIs like Intercom and text analysis tools.\nMarketAnalysisAgent: This agent generates and analyzes market data using AI.\nReportingAgent: This agent generates reports and visualizations using libraries like Jinja2 and matplotlib, aggregating data from all other agents.\n"
                            },
                            "message": {
                                "description": "Specify the task required for the recipient agent to complete. Focus on clarifying what the task entails, rather than providing exact instructions.",
                                "title": "Message",
                                "type": "string"
                            },
                            "message_files": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "A list of file ids to be sent as attachments to this message. Only use this if you have the file id that starts with 'file-'.",
                                "examples": [
                                    "file-1234",
                                    "file-5678"
                                ],
                                "title": "Message Files"
                            },
                            "additional_instructions": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context or instructions for the recipient agent about the task. For example, additional information provided by the user or other agents.",
                                "title": "Additional Instructions"
                            }
                        },
                        "required": [
                            "message",
                            "my_primary_instructions",
                            "recipient"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.7,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_IKSKRQeM4jqlUJ2Al6YvOYp4",
        "created_at": 1732298926,
        "description": "This agent tracks competitor activities using AI-powered analysis.",
        "instructions": "## MarketInsightAgency Manifesto\n\nThe mission of MarketInsightAgency is to provide comprehensive market analysis and insights by leveraging advanced AI-driven agents. These agents will work collaboratively to analyze market trends, track competitors, assess sentiment, generate customer profiles, collect feedback, and produce detailed reports. If any API fails, the agents will utilize GPT-based datasets to generate the necessary data. The ultimate goal is to empower businesses with actionable insights for strategic decision-making.\n\n### Goals\n- Deliver accurate and timely market trend analysis.\n- Monitor competitors effectively and provide actionable insights.\n- Assess sentiment from news and social media platforms.\n- Generate detailed customer profiles using CRM and demographic data.\n- Collect and analyze user feedback efficiently.\n- Identify market opportunities through economic data analysis.\n- Produce comprehensive reports and visualizations for strategic decisions.\n\n### Working Environment\nThe agency operates in a dynamic environment where agents utilize a variety of tools and libraries, including pandas, scikit-learn, BeautifulSoup, Scrapy, NLTK, spaCy, Jinja2, and matplotlib. In cases where APIs are unavailable, GPT-based datasets will be used to ensure continuous data flow and analysis.\n\n# CompetitorTrackingAgent Instructions\n\nYou are an agent responsible for tracking competitor activities using AI-powered analysis. Instead of traditional web scraping, you use advanced language models to generate insights and analysis.\n\n### Primary Responsibilities:\n1. Generate competitor insights using AI analysis\n2. Track market movements and competitive positioning\n3. Analyze competitor strategies and developments\n4. Create comprehensive competitor intelligence reports\n\n### Process Workflow:\n1. Receive competitor tracking requests\n2. Use AIDataAnalyzer tool to generate relevant insights\n3. Analyze and structure the information\n4. Create detailed reports using MarkdownWriter and TaskReporter\n5. Share insights with other agents in the agency\n\n### Data Generation Guidelines:\n- Use realistic parameters when requesting data\n- Provide detailed context for better AI analysis\n- Cross-reference multiple analyses for consistency\n- Focus on actionable insights and strategic implications\n\n### Report Creation:\n1. Structure reports clearly with key findings\n2. Include specific metrics and trends\n3. Add strategic recommendations\n4. Document sources and analysis methods",
        "metadata": {},
        "model": "gpt-4-1106-preview",
        "name": "CompetitorTrackingAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "CompTrack_AIDataAnalyzer",
                    "description": "Correctly extracted `CompTrack_AIDataAnalyzer` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "query_type": {
                                "description": "Type of analysis/data needed (e.g., 'web_scraping', 'sentiment_analysis', 'market_data', 'social_media_metrics')",
                                "title": "Query Type",
                                "type": "string"
                            },
                            "query_params": {
                                "description": "Parameters that would normally go to an API, now used to guide the AI analysis",
                                "title": "Query Params",
                                "type": "object"
                            },
                            "context": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context to help the AI generate more accurate responses",
                                "title": "Context"
                            }
                        },
                        "required": [
                            "query_params",
                            "query_type"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "CompTrack_MarkdownWriter",
                    "description": "Correctly extracted `CompTrack_MarkdownWriter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "content": {
                                "description": "The content to write to the markdown file",
                                "title": "Content",
                                "type": "string"
                            },
                            "file_path": {
                                "description": "The path where the markdown file should be saved (including filename)",
                                "title": "File Path",
                                "type": "string"
                            },
                            "metadata": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional metadata to include at the top of the file in YAML format",
                                "title": "Metadata"
                            },
                            "append": {
                                "default": false,
                                "description": "If True, append to existing file. If False, create new or overwrite",
                                "title": "Append",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "content",
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "CompTrack_TaskReporter",
                    "description": "Correctly extracted `CompTrack_TaskReporter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "task_name": {
                                "description": "Name or title of the task",
                                "title": "Task Name",
                                "type": "string"
                            },
                            "task_description": {
                                "description": "Detailed description of the task",
                                "title": "Task Description",
                                "type": "string"
                            },
                            "findings": {
                                "description": "List of key findings or results",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Findings",
                                "type": "array"
                            },
                            "actions_taken": {
                                "description": "List of actions taken during the task",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Actions Taken",
                                "type": "array"
                            },
                            "recommendations": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional list of recommendations based on findings",
                                "title": "Recommendations"
                            },
                            "additional_info": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Any additional information to include in the report",
                                "title": "Additional Info"
                            },
                            "output_dir": {
                                "default": "./reports",
                                "description": "Directory where the report should be saved",
                                "title": "Output Dir",
                                "type": "string"
                            }
                        },
                        "required": [
                            "actions_taken",
                            "findings",
                            "task_description",
                            "task_name"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.7,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_Vf2doRBTlnmaJk2C0sUcW8J4",
        "created_at": 1732298927,
        "description": "This agent processes news and social media sentiment using NLP libraries like NLTK and spaCy.",
        "instructions": "## MarketInsightAgency Manifesto\n\nThe mission of MarketInsightAgency is to provide comprehensive market analysis and insights by leveraging advanced AI-driven agents. These agents will work collaboratively to analyze market trends, track competitors, assess sentiment, generate customer profiles, collect feedback, and produce detailed reports. If any API fails, the agents will utilize GPT-based datasets to generate the necessary data. The ultimate goal is to empower businesses with actionable insights for strategic decision-making.\n\n### Goals\n- Deliver accurate and timely market trend analysis.\n- Monitor competitors effectively and provide actionable insights.\n- Assess sentiment from news and social media platforms.\n- Generate detailed customer profiles using CRM and demographic data.\n- Collect and analyze user feedback efficiently.\n- Identify market opportunities through economic data analysis.\n- Produce comprehensive reports and visualizations for strategic decisions.\n\n### Working Environment\nThe agency operates in a dynamic environment where agents utilize a variety of tools and libraries, including pandas, scikit-learn, BeautifulSoup, Scrapy, NLTK, spaCy, Jinja2, and matplotlib. In cases where APIs are unavailable, GPT-based datasets will be used to ensure continuous data flow and analysis.\n\n# SentimentAnalysisAgent Instructions\n\nYou are an agent responsible for processing news and social media sentiment using NLP libraries like NLTK and spaCy. You must ensure that the sentiment analysis is accurate and relevant to the agency's goals.\n\n### Primary Instructions:\n1. Collect news articles and social media posts relevant to the market and competitors.\n2. Use NLP libraries like NLTK and spaCy to process and analyze the sentiment of the collected data.\n3. Identify positive, negative, and neutral sentiments and categorize them accordingly.\n4. Generate reports and visualizations to communicate your findings to other agents and clients.\n5. Collaborate with other agents to ensure your analysis aligns with the agency's goals and objectives.\n6. Continuously update your analysis based on new data and feedback from clients and stakeholders.",
        "metadata": {},
        "model": "gpt-4-1106-preview",
        "name": "SentimentAnalysisAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "Sentiment_AIDataAnalyzer",
                    "description": "Correctly extracted `Sentiment_AIDataAnalyzer` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "query_type": {
                                "description": "Type of analysis/data needed (e.g., 'web_scraping', 'sentiment_analysis', 'market_data', 'social_media_metrics')",
                                "title": "Query Type",
                                "type": "string"
                            },
                            "query_params": {
                                "description": "Parameters that would normally go to an API, now used to guide the AI analysis",
                                "title": "Query Params",
                                "type": "object"
                            },
                            "context": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context to help the AI generate more accurate responses",
                                "title": "Context"
                            }
                        },
                        "required": [
                            "query_params",
                            "query_type"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "Sentiment_MarkdownWriter",
                    "description": "Correctly extracted `Sentiment_MarkdownWriter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "content": {
                                "description": "The content to write to the markdown file",
                                "title": "Content",
                                "type": "string"
                            },
                            "file_path": {
                                "description": "The path where the markdown file should be saved (including filename)",
                                "title": "File Path",
                                "type": "string"
                            },
                            "metadata": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional metadata to include at the top of the file in YAML format",
                                "title": "Metadata"
                            },
                            "append": {
                                "default": false,
                                "description": "If True, append to existing file. If False, create new or overwrite",
                                "title": "Append",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "content",
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "Sentiment_TaskReporter",
                    "description": "Correctly extracted `Sentiment_TaskReporter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "task_name": {
                                "description": "Name or title of the task",
                                "title": "Task Name",
                                "type": "string"
                            },
                            "task_description": {
                                "description": "Detailed description of the task",
                                "title": "Task Description",
                                "type": "string"
                            },
                            "findings": {
                                "description": "List of key findings or results",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Findings",
                                "type": "array"
                            },
                            "actions_taken": {
                                "description": "List of actions taken during the task",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Actions Taken",
                                "type": "array"
                            },
                            "recommendations": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional list of recommendations based on findings",
                                "title": "Recommendations"
                            },
                            "additional_info": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Any additional information to include in the report",
                                "title": "Additional Info"
                            },
                            "output_dir": {
                                "default": "./reports",
                                "description": "Directory where the report should be saved",
                                "title": "Output Dir",
                                "type": "string"
                            }
                        },
                        "required": [
                            "actions_taken",
                            "findings",
                            "task_description",
                            "task_name"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.7,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_dkLaKCEeKpwvqN6nNUI5bhvw",
        "created_at": 1732298927,
        "description": "This agent creates customer profiles using CRM data and demographic databases with pandas and scikit-learn.",
        "instructions": "## MarketInsightAgency Manifesto\n\nThe mission of MarketInsightAgency is to provide comprehensive market analysis and insights by leveraging advanced AI-driven agents. These agents will work collaboratively to analyze market trends, track competitors, assess sentiment, generate customer profiles, collect feedback, and produce detailed reports. If any API fails, the agents will utilize GPT-based datasets to generate the necessary data. The ultimate goal is to empower businesses with actionable insights for strategic decision-making.\n\n### Goals\n- Deliver accurate and timely market trend analysis.\n- Monitor competitors effectively and provide actionable insights.\n- Assess sentiment from news and social media platforms.\n- Generate detailed customer profiles using CRM and demographic data.\n- Collect and analyze user feedback efficiently.\n- Identify market opportunities through economic data analysis.\n- Produce comprehensive reports and visualizations for strategic decisions.\n\n### Working Environment\nThe agency operates in a dynamic environment where agents utilize a variety of tools and libraries, including pandas, scikit-learn, BeautifulSoup, Scrapy, NLTK, spaCy, Jinja2, and matplotlib. In cases where APIs are unavailable, GPT-based datasets will be used to ensure continuous data flow and analysis.\n\n# ICPGeneratorAgent Instructions\n\nYou are an agent responsible for creating Ideal Customer Profiles (ICPs) using CRM data and demographic databases. You must use data analysis and machine learning libraries like pandas and scikit-learn to perform your tasks effectively.\n\n### Primary Instructions:\n1. Access CRM data and demographic databases to gather relevant customer information.\n2. Use pandas to clean and preprocess the data, ensuring it is structured and ready for analysis.\n3. Apply machine learning techniques using scikit-learn to identify patterns and segments within the data.\n4. Generate detailed customer profiles that highlight key characteristics and behaviors.\n5. Collaborate with other agents to ensure the profiles align with the agency's goals and objectives.\n6. Continuously update the profiles based on new data and feedback from clients and stakeholders.",
        "metadata": {},
        "model": "gpt-4-1106-preview",
        "name": "ICPGeneratorAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "ICP_AIDataAnalyzer",
                    "description": "Correctly extracted `ICP_AIDataAnalyzer` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "query_type": {
                                "description": "Type of analysis/data needed (e.g., 'web_scraping', 'sentiment_analysis', 'market_data', 'social_media_metrics')",
                                "title": "Query Type",
                                "type": "string"
                            },
                            "query_params": {
                                "description": "Parameters that would normally go to an API, now used to guide the AI analysis",
                                "title": "Query Params",
                                "type": "object"
                            },
                            "context": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context to help the AI generate more accurate responses",
                                "title": "Context"
                            }
                        },
                        "required": [
                            "query_params",
                            "query_type"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ICP_MarkdownWriter",
                    "description": "Correctly extracted `ICP_MarkdownWriter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "content": {
                                "description": "The content to write to the markdown file",
                                "title": "Content",
                                "type": "string"
                            },
                            "file_path": {
                                "description": "The path where the markdown file should be saved (including filename)",
                                "title": "File Path",
                                "type": "string"
                            },
                            "metadata": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional metadata to include at the top of the file in YAML format",
                                "title": "Metadata"
                            },
                            "append": {
                                "default": false,
                                "description": "If True, append to existing file. If False, create new or overwrite",
                                "title": "Append",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "content",
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ICP_TaskReporter",
                    "description": "Correctly extracted `ICP_TaskReporter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "task_name": {
                                "description": "Name or title of the task",
                                "title": "Task Name",
                                "type": "string"
                            },
                            "task_description": {
                                "description": "Detailed description of the task",
                                "title": "Task Description",
                                "type": "string"
                            },
                            "findings": {
                                "description": "List of key findings or results",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Findings",
                                "type": "array"
                            },
                            "actions_taken": {
                                "description": "List of actions taken during the task",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Actions Taken",
                                "type": "array"
                            },
                            "recommendations": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional list of recommendations based on findings",
                                "title": "Recommendations"
                            },
                            "additional_info": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Any additional information to include in the report",
                                "title": "Additional Info"
                            },
                            "output_dir": {
                                "default": "./reports",
                                "description": "Directory where the report should be saved",
                                "title": "Output Dir",
                                "type": "string"
                            }
                        },
                        "required": [
                            "actions_taken",
                            "findings",
                            "task_description",
                            "task_name"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.7,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_pd1ywMbzK60L1Vqvws5NInlQ",
        "created_at": 1732298927,
        "description": "This agent processes user feedback through APIs like Intercom and text analysis tools.",
        "instructions": "## MarketInsightAgency Manifesto\n\nThe mission of MarketInsightAgency is to provide comprehensive market analysis and insights by leveraging advanced AI-driven agents. These agents will work collaboratively to analyze market trends, track competitors, assess sentiment, generate customer profiles, collect feedback, and produce detailed reports. If any API fails, the agents will utilize GPT-based datasets to generate the necessary data. The ultimate goal is to empower businesses with actionable insights for strategic decision-making.\n\n### Goals\n- Deliver accurate and timely market trend analysis.\n- Monitor competitors effectively and provide actionable insights.\n- Assess sentiment from news and social media platforms.\n- Generate detailed customer profiles using CRM and demographic data.\n- Collect and analyze user feedback efficiently.\n- Identify market opportunities through economic data analysis.\n- Produce comprehensive reports and visualizations for strategic decisions.\n\n### Working Environment\nThe agency operates in a dynamic environment where agents utilize a variety of tools and libraries, including pandas, scikit-learn, BeautifulSoup, Scrapy, NLTK, spaCy, Jinja2, and matplotlib. In cases where APIs are unavailable, GPT-based datasets will be used to ensure continuous data flow and analysis.\n\n# FeedbackCollectorAgent Instructions\n\nYou are an agent responsible for processing user feedback through APIs like Intercom and text analysis tools. You must ensure that the feedback collected is accurate, relevant, and actionable for the agency's goals.\n\n### Primary Instructions:\n1. Connect to feedback platforms and APIs like Intercom to gather user feedback.\n2. Use text analysis tools to process and analyze the feedback data.\n3. Identify key themes, sentiments, and actionable insights from the feedback.\n4. Generate reports and visualizations to communicate findings to other agents and clients.\n5. Collaborate with other agents to ensure the feedback aligns with the agency's goals and objectives.\n6. Continuously update the feedback analysis based on new data and feedback from clients and stakeholders.",
        "metadata": {},
        "model": "gpt-4-1106-preview",
        "name": "FeedbackCollectorAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "Feedback_AIDataAnalyzer",
                    "description": "Correctly extracted `Feedback_AIDataAnalyzer` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "query_type": {
                                "description": "Type of analysis/data needed (e.g., 'web_scraping', 'sentiment_analysis', 'market_data', 'social_media_metrics')",
                                "title": "Query Type",
                                "type": "string"
                            },
                            "query_params": {
                                "description": "Parameters that would normally go to an API, now used to guide the AI analysis",
                                "title": "Query Params",
                                "type": "object"
                            },
                            "context": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context to help the AI generate more accurate responses",
                                "title": "Context"
                            }
                        },
                        "required": [
                            "query_params",
                            "query_type"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "Feedback_MarkdownWriter",
                    "description": "Correctly extracted `Feedback_MarkdownWriter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "content": {
                                "description": "The content to write to the markdown file",
                                "title": "Content",
                                "type": "string"
                            },
                            "file_path": {
                                "description": "The path where the markdown file should be saved (including filename)",
                                "title": "File Path",
                                "type": "string"
                            },
                            "metadata": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional metadata to include at the top of the file in YAML format",
                                "title": "Metadata"
                            },
                            "append": {
                                "default": false,
                                "description": "If True, append to existing file. If False, create new or overwrite",
                                "title": "Append",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "content",
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "Feedback_TaskReporter",
                    "description": "Correctly extracted `Feedback_TaskReporter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "task_name": {
                                "description": "Name or title of the task",
                                "title": "Task Name",
                                "type": "string"
                            },
                            "task_description": {
                                "description": "Detailed description of the task",
                                "title": "Task Description",
                                "type": "string"
                            },
                            "findings": {
                                "description": "List of key findings or results",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Findings",
                                "type": "array"
                            },
                            "actions_taken": {
                                "description": "List of actions taken during the task",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Actions Taken",
                                "type": "array"
                            },
                            "recommendations": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional list of recommendations based on findings",
                                "title": "Recommendations"
                            },
                            "additional_info": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Any additional information to include in the report",
                                "title": "Additional Info"
                            },
                            "output_dir": {
                                "default": "./reports",
                                "description": "Directory where the report should be saved",
                                "title": "Output Dir",
                                "type": "string"
                            }
                        },
                        "required": [
                            "actions_taken",
                            "findings",
                            "task_description",
                            "task_name"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.7,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_dC5ZeZIoopNG0cnIKNRwKmgh",
        "created_at": 1732298928,
        "description": "This agent generates and analyzes market data using AI.",
        "instructions": "## MarketInsightAgency Manifesto\n\nThe mission of MarketInsightAgency is to provide comprehensive market analysis and insights by leveraging advanced AI-driven agents. These agents will work collaboratively to analyze market trends, track competitors, assess sentiment, generate customer profiles, collect feedback, and produce detailed reports. If any API fails, the agents will utilize GPT-based datasets to generate the necessary data. The ultimate goal is to empower businesses with actionable insights for strategic decision-making.\n\n### Goals\n- Deliver accurate and timely market trend analysis.\n- Monitor competitors effectively and provide actionable insights.\n- Assess sentiment from news and social media platforms.\n- Generate detailed customer profiles using CRM and demographic data.\n- Collect and analyze user feedback efficiently.\n- Identify market opportunities through economic data analysis.\n- Produce comprehensive reports and visualizations for strategic decisions.\n\n### Working Environment\nThe agency operates in a dynamic environment where agents utilize a variety of tools and libraries, including pandas, scikit-learn, BeautifulSoup, Scrapy, NLTK, spaCy, Jinja2, and matplotlib. In cases where APIs are unavailable, GPT-based datasets will be used to ensure continuous data flow and analysis.\n\n# MarketAnalysisAgent Instructions\n\nYou are an AI-powered market analysis agent responsible for both generating and analyzing market data using advanced language models. Instead of relying on external data sources, you create realistic and insightful market data through AI generation.\n\n### Primary Responsibilities:\n1. Generate comprehensive market data using AI\n2. Create realistic market metrics and trends\n3. Generate and analyze competitive landscapes\n4. Generate and assess consumer behavior patterns\n5. Create AI-powered market analysis reports\n\n### Process Workflow:\n1. Receive market analysis requests\n2. Generate market data using AI:\n   - Market size and growth metrics\n   - Competitive landscape data\n   - Consumer behavior patterns\n   - Industry trends and predictions\n3. Analyze the AI-generated data\n4. Create structured reports using MarkdownWriter\n5. Share insights with other agents\n\n### Data Generation Guidelines:\n- Generate realistic and consistent market metrics\n- Create detailed competitive landscapes\n- Produce believable consumer insights\n- Generate plausible future trends\n- Ensure all generated data is contextually appropriate\n\n### Analysis Focus Areas:\n1. Market Size and Growth:\n   - Generate realistic market valuations\n   - Create plausible growth projections\n   - Define market segments\n   - Generate regional distribution data\n\n2. Competitive Analysis:\n   - Generate key player profiles\n   - Create market share distributions\n   - Define competitive strategies\n   - Generate SWOT analyses\n\n3. Consumer Insights:\n   - Generate demographic profiles\n   - Create preference patterns\n   - Define buying behaviors\n   - Generate trend analyses\n\n4. Future Predictions:\n   - Generate technology trend forecasts\n   - Create regulatory change predictions\n   - Define market evolution patterns\n   - Generate strategic implications\n\n### Report Structure:\n1. Executive Summary\n2. Market Metrics Analysis\n3. Competitive Landscape\n4. Consumer Insights\n5. Future Trends\n6. Strategic Recommendations\n\n### AI Data Generation Principles:\n1. Consistency: Ensure all generated data points are consistent with each other\n2. Realism: Generate data that reflects real-world market dynamics\n3. Context: Consider industry and regional specifics in data generation\n4. Actionability: Generate insights that lead to clear strategic recommendations\n5. Comprehensiveness: Cover all key aspects of market analysis",
        "metadata": {},
        "model": "gpt-4-1106-preview",
        "name": "MarketAnalysisAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "Market_AIDataAnalyzer",
                    "description": "Correctly extracted `Market_AIDataAnalyzer` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "query_type": {
                                "description": "Type of analysis/data needed (e.g., 'web_scraping', 'sentiment_analysis', 'market_data', 'social_media_metrics')",
                                "title": "Query Type",
                                "type": "string"
                            },
                            "query_params": {
                                "description": "Parameters that would normally go to an API, now used to guide the AI analysis",
                                "title": "Query Params",
                                "type": "object"
                            },
                            "context": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context to help the AI generate more accurate responses",
                                "title": "Context"
                            }
                        },
                        "required": [
                            "query_params",
                            "query_type"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "Market_MarkdownWriter",
                    "description": "Correctly extracted `Market_MarkdownWriter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "content": {
                                "description": "The content to write to the markdown file",
                                "title": "Content",
                                "type": "string"
                            },
                            "file_path": {
                                "description": "The path where the markdown file should be saved (including filename)",
                                "title": "File Path",
                                "type": "string"
                            },
                            "metadata": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional metadata to include at the top of the file in YAML format",
                                "title": "Metadata"
                            },
                            "append": {
                                "default": false,
                                "description": "If True, append to existing file. If False, create new or overwrite",
                                "title": "Append",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "content",
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "Market_TaskReporter",
                    "description": "Correctly extracted `Market_TaskReporter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "task_name": {
                                "description": "Name or title of the task",
                                "title": "Task Name",
                                "type": "string"
                            },
                            "task_description": {
                                "description": "Detailed description of the task",
                                "title": "Task Description",
                                "type": "string"
                            },
                            "findings": {
                                "description": "List of key findings or results",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Findings",
                                "type": "array"
                            },
                            "actions_taken": {
                                "description": "List of actions taken during the task",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Actions Taken",
                                "type": "array"
                            },
                            "recommendations": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional list of recommendations based on findings",
                                "title": "Recommendations"
                            },
                            "additional_info": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Any additional information to include in the report",
                                "title": "Additional Info"
                            },
                            "output_dir": {
                                "default": "./reports",
                                "description": "Directory where the report should be saved",
                                "title": "Output Dir",
                                "type": "string"
                            }
                        },
                        "required": [
                            "actions_taken",
                            "findings",
                            "task_description",
                            "task_name"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.7,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_RKcqMQG7DedTAzY81v9sXkzy",
        "created_at": 1732298928,
        "description": "This agent generates reports and visualizations using libraries like Jinja2 and matplotlib, aggregating data from all other agents.",
        "instructions": "## MarketInsightAgency Manifesto\n\nThe mission of MarketInsightAgency is to provide comprehensive market analysis and insights by leveraging advanced AI-driven agents. These agents will work collaboratively to analyze market trends, track competitors, assess sentiment, generate customer profiles, collect feedback, and produce detailed reports. If any API fails, the agents will utilize GPT-based datasets to generate the necessary data. The ultimate goal is to empower businesses with actionable insights for strategic decision-making.\n\n### Goals\n- Deliver accurate and timely market trend analysis.\n- Monitor competitors effectively and provide actionable insights.\n- Assess sentiment from news and social media platforms.\n- Generate detailed customer profiles using CRM and demographic data.\n- Collect and analyze user feedback efficiently.\n- Identify market opportunities through economic data analysis.\n- Produce comprehensive reports and visualizations for strategic decisions.\n\n### Working Environment\nThe agency operates in a dynamic environment where agents utilize a variety of tools and libraries, including pandas, scikit-learn, BeautifulSoup, Scrapy, NLTK, spaCy, Jinja2, and matplotlib. In cases where APIs are unavailable, GPT-based datasets will be used to ensure continuous data flow and analysis.\n\n# ReportingAgent Instructions\n\nYou are an agent responsible for generating reports and visualizations using libraries like Jinja2 and matplotlib. You must aggregate data from all other agents to create comprehensive and insightful reports.\n\n### Primary Instructions:\n1. Collect and aggregate data from all other agents within the agency.\n2. Use Jinja2 to create dynamic and customizable report templates.\n3. Utilize matplotlib to generate visualizations that effectively communicate insights.\n4. Compile the data, templates, and visualizations into comprehensive reports.\n5. Collaborate with other agents to ensure the reports align with the agency's goals and objectives.\n6. Continuously update the reports based on new data and feedback from clients and stakeholders.",
        "metadata": {},
        "model": "gpt-4-1106-preview",
        "name": "ReportingAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "Report_GPTDataProcessor",
                    "description": "Correctly extracted `Report_GPTDataProcessor` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "input_text": {
                                "description": "The text input to be processed by the GPT model",
                                "title": "Input Text",
                                "type": "string"
                            },
                            "task_type": {
                                "description": "Type of analysis to perform (e.g., 'market_analysis', 'sentiment_analysis', 'competitor_analysis')",
                                "title": "Task Type",
                                "type": "string"
                            },
                            "model": {
                                "default": "gpt-4-1106-preview",
                                "description": "The GPT model to use for processing",
                                "title": "Model",
                                "type": "string"
                            },
                            "additional_context": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context or parameters for the analysis",
                                "title": "Additional Context"
                            },
                            "output_format": {
                                "default": "markdown",
                                "description": "Format of the output (markdown, json, text)",
                                "title": "Output Format",
                                "type": "string"
                            }
                        },
                        "required": [
                            "input_text",
                            "task_type"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "Report_MarkdownWriter",
                    "description": "Correctly extracted `Report_MarkdownWriter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "content": {
                                "description": "The content to write to the markdown file",
                                "title": "Content",
                                "type": "string"
                            },
                            "file_path": {
                                "description": "The path where the markdown file should be saved (including filename)",
                                "title": "File Path",
                                "type": "string"
                            },
                            "metadata": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional metadata to include at the top of the file in YAML format",
                                "title": "Metadata"
                            },
                            "append": {
                                "default": false,
                                "description": "If True, append to existing file. If False, create new or overwrite",
                                "title": "Append",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "content",
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "Report_TaskReporter",
                    "description": "Correctly extracted `Report_TaskReporter` with all the required parameters with correct types",
                    "parameters": {
                        "properties": {
                            "task_name": {
                                "description": "Name or title of the task",
                                "title": "Task Name",
                                "type": "string"
                            },
                            "task_description": {
                                "description": "Detailed description of the task",
                                "title": "Task Description",
                                "type": "string"
                            },
                            "findings": {
                                "description": "List of key findings or results",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Findings",
                                "type": "array"
                            },
                            "actions_taken": {
                                "description": "List of actions taken during the task",
                                "items": {
                                    "type": "string"
                                },
                                "title": "Actions Taken",
                                "type": "array"
                            },
                            "recommendations": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Optional list of recommendations based on findings",
                                "title": "Recommendations"
                            },
                            "additional_info": {
                                "anyOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Any additional information to include in the report",
                                "title": "Additional Info"
                            },
                            "output_dir": {
                                "default": "./reports",
                                "description": "Directory where the report should be saved",
                                "title": "Output Dir",
                                "type": "string"
                            }
                        },
                        "required": [
                            "actions_taken",
                            "findings",
                            "task_description",
                            "task_name"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.7,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    }
]